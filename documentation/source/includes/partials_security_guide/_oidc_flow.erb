## Fluxo OpenID Connect (OIDC) 

O OpenID Connect define os seguintes fluxos: 

* *Authorization Code Flow*: Para autenticar um usuário, o *client* redireciona o usuário para um provedor de OpenID. O provedor OpenID autentica o usuário e redireciona o usuário de volta para o *client* com um código de autorização. O aplicativo usa o código de autorização para obter um *ID Token*, *Access Token* e, opcionalmente, um *Refresh Token* do *endpoint* do provedor OpenID. 
* *Implicit flow*: Todos os tokens são retornados pelo *endpoint* de autorização, o *Endpoint* de Token não é utilizado, esse tipo de fluxo é usado principalmente por *Clients* implementados em um navegador utilizando uma linguagem de script. O *Access Token* e o *ID Token* são devolvidos diretamente ao *Client*, que pode expô-los ao usuário final e aos aplicativos que têm acesso 
* *Hybrid flow*: O *Hybrid Flow*, combina elementos do *Authorization Code Flow* e *Implicit Flow*, esse modelo permite retornar um *ID Token* e um *Authorization Code* como uma resposta ao *front-end* do *client*, deixando o *backend* obter um *Access Token* e opcionalmente um *Refresh Token* do *endpoint* de token utilizando o *Authorization Code*. Esse padrão de autenticação foi escolhido como mandatório pelo Open Banking e pode ser observado no diagrama a seguir. 

<img class='lazy' src='images/loading.gif' data-src='images/security/Hybrid_Flow.png'/>

Diagrama - Fluxo *Hybrid Flow*

1.	Usuário acessa o aplicativo e faz requisições ao *Client*. 
2.	*Client* redireciona a requisição de autenticação ao *Authorization Server*. 
3.	O *Authorization Server* interage com o usuário com a requisição de autenticação e o consentimento sobre o escopo. 
4.	Usuário efetua a autenticação e provê o consentimento, o *Authorization Server* cria ou atualiza uma sessão para o usuário. 
5.	*Authorization Server* direciona o *End-User* de volta ao *client* com um código de autorização e, dependendo do tipo da resposta, com parâmetros adicionais. 
6.	O *Client* solicita uma resposta ao *Authorization Server* com o código de autorização para obter os demais tokens. 
7.	O *Authorization Server* responde com o *ID Token* e um *Access Token*. 
8.	O *Client* valida o *ID Token* e busca o *Subject Identifier* do *End-User*. O *Authorization Server* deve suportar *request objects* conforme especificado na seção 6.1 (*Request Object*) do OIDC.