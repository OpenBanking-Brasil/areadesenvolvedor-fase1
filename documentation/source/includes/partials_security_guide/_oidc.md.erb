## OpenID Connect (OIDC)

O OpenID Connect é uma camada de identidade sobre o protocolo OAuth 2.0, que permite a identificação de um usuário final com base na autenticação realizada por um *Authorization Server*. 
OpenID Connect permite uma grande variedade de tipos de *clients*, sendo, *clients* Web, *clients* móveis e JavaScript, oferecendo suporte a recursos opcionais, como criptografia de dados de identidade, descoberta de provedores de OpenID e gerenciamento de sessão.<br>
Existem três papéis envolvendo uma solução de OIDC: 

* *End-User*: É o sujeito a ser autenticado.  
* OpenID Provider - OP: O provedor OpenID é um servidor de autorização OAuth 2.0 que implementa OIDC e pode autenticar um usuário e retornar *claims* sobre o usuário autenticado e o evento de autenticação para uma parte confiável, geralmente um aplicativo.
* *Relying Party* – RP: Um *client* OAuth 2.0 que delega a autenticação de usuários para um provedor de OpenID e solicita *claims* sobre o usuário do provedor OpenID, geralmente denominado, *client*.
 
### ID Token 

O OIDC utiliza o *authorization code*, *access token* e *refresh token* descrito na seção anterior sobre OAuth e define um outro tipo de Token, o *ID Token*. 

* *ID Token*: Um token utilizado para transmitir *claims* sobre um evento de autenticação e um usuário autenticado *(End-user)* para um *client*. Tokens de identificação são codificados em JSON Web Token (JWT) e deve estar em conformidade com a LGPD.

<span style="font-family: Courier New">
__{"iss": "http://YOUR_DOMAIN/",__<br>
__"sub": "xpto|123456",__<br>
__"aud": "YOUR_CLIENT_ID",__<br>
__"exp": "1311281970",__<br>
__"iat": "1311280970",__<br>
__"id": "1234567"}__<br>
</span>

*__UserInfo Endpoint__*: Retorna *claims* sobre um usuário autenticado. Chamar o *endpoint* requer um *Access Token* e as *claims* retornadas são regidos pelo *Access Token*.<br>
Exemplo de resposta bem-sucedida  contendo um *ID Token* assinado:<br>

HTTP/1.1 200 OK<br>
Content-Type: application/json<br>
Cache-Control: no-store<br>
Pragma: no-cache<br>

<span style="font-family: Courier New">
__{"access_token": "SlAV32hkKG",__<br>
__"token_type": "Bearer",__<br>
__"refresh_token": "8xLOxBtZp8",__<br>
__"expires_in": "3600",__<br>
__"id_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc__<br>
  __yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5__<br>
  __NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ__<br>
  __fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz__<br>
  __AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q__<br>
  __Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ__<br>
  __NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd__<br>
  __QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS__<br>
  __K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4__<br>
  __XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg"}__<br>
</span>
